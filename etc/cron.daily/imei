#!/bin/sh

##############################################################
# Title          : IMEI - ImageMagick Easy Install - Cronjob #
# Description    : Cronjob for IMEI                          #
#                                                            #
# Author         : Sascha Greuel <hello@1-2.dev>             #
# Date           : 2020-09-12 04:00                          #
# License        : MIT                                       #
# Version        : 1.1.1                                     #
##############################################################

####################
# Helper functions #
####################

version() {
  echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
}

command_exists() {
  command -v "$@" >/dev/null 2>&1
}

######################
# Check requirements #
######################

# Check if required packages are installed or install them
required_packages="wget jq"

for package in $required_packages; do
  if ! command_exists "$package"; then
    apt-get install -qq "$package" >/dev/null 2>&1
  fi
done

####################
# Script arguments #
####################

while [ "$#" -gt 0 ]; do
  case "$1" in
  --verbose | -v)
    VERBOSE="1"
    ;;
  --skip-version-check)
    SKIP_VERSION_CHECK="1"
    ;;
  *) ;;
  esac
  shift
done

###############
# Self update #
###############

if [ -f "$0" ] && [ -z "$SKIP_VERSION_CHECK" ]; then
  CRON_VER=$(grep -oP 'Version\s+:\s+\K([\d\.]+)' "$0")
  CRON_LATEST_VER=$(wget -qO- "https://1-2.dev/imei-cron" | grep -oP 'Version\s+:\s+\K([\d\.]+)')

  if [ -n "$CRON_VER" ] && [ "$(version "$CRON_VER")" -lt "$(version "$CRON_LATEST_VER")" ]; then
    if [ -n "$VERBOSE" ]; then
      echo "A newer cron version ($CRON_LATEST_VER) is available. Attempting a self update and restarting the process."
      echo ""
    fi

    wget -O "$0" "https://1-2.dev/imei-cron" >/dev/null 2>&1

    if [ -n "$VERBOSE" ]; then
      exec "$0" --verbose --skip-version-check
    else
      exec "$0" --skip-version-check
    fi

    exit 0
  fi
fi

#####################
# Version retrieval #
#####################

if [ -n "$GITHUB_TOKEN" ]; then
  GITHUB_AUTH="--header='Authorization: token $GITHUB_TOKEN'"
else
  GITHUB_AUTH=""
fi

if command_exists identify; then
  INSTALLED_IMAGEMAGICK_VER=$(identify -version | grep -oP 'Version: ImageMagick \K([\d\.\-]+)')
  LATEST_IMAGEMAGICK_VER=$(
    wget "$GITHUB_AUTH" -qO- "https://api.github.com/repos/ImageMagick/ImageMagick/releases/latest" |
      jq -r '.tag_name'
  )

  # Fallback
  if [ -z "$LATEST_IMAGEMAGICK_VER" ]; then
    LATEST_IMAGEMAGICK_VER=$(
      wget -qO- "https://1-2.dev/imei?versions" |
        jq -r '.imagemagick'
    )
  fi

  if [ -n "$VERBOSE" ]; then
    if [ -z "$INSTALLED_IMAGEMAGICK_VER" ]; then
      echo "INSTALLED_IMAGEMAGICK_VER: Unknown"
    else
      echo "INSTALLED_IMAGEMAGICK_VER: $INSTALLED_IMAGEMAGICK_VER"
    fi

    if [ -z "$LATEST_IMAGEMAGICK_VER" ]; then
      echo "LATEST_IMAGEMAGICK_VER: Unknown"
    else
      echo "LATEST_IMAGEMAGICK_VER: $LATEST_IMAGEMAGICK_VER"
    fi
    echo ""
  fi

  if [ -L /usr/local/lib/libaom.so ]; then
    INSTALLED_AOM_VER=$(readlink -f /usr/local/lib/libaom.so | xargs basename | grep -oP 'libaom.so.\K([\d\.]+)')

    if [ -n "$VERBOSE" ]; then
      echo "INSTALLED_AOM_VER: $INSTALLED_AOM_VER"
    fi
  else
    if [ -n "$VERBOSE" ]; then
      echo "INSTALLED_AOM_VER: Unknown"
    fi
  fi

  LATEST_AOM_VER=$(
    wget "$GITHUB_AUTH" -qO- "https://api.github.com/repos/jbeich/aom/tags" |
      jq -r '.[0].name' |
      cut -c2-
  )

  # Fallback
  if [ -z "$LATEST_AOM_VER" ]; then
    LATEST_AOM_VER=$(
      wget -qO- "https://1-2.dev/imei?versions" |
        jq -r '.aom'
    )
  fi

  if [ -n "$VERBOSE" ]; then
    if [ -z "$LATEST_AOM_VER" ]; then
      echo "LATEST_AOM_VER: Unknown"
    else
      echo "LATEST_AOM_VER: $LATEST_AOM_VER"
    fi
    echo ""
  fi

  if [ -L /usr/local/lib/libheif.so ]; then
    INSTALLED_LIBHEIF_VER=$(readlink -f /usr/local/lib/libheif.so | xargs basename | grep -oP 'libheif.so.\K([\d\.]+)')

    if [ -n "$VERBOSE" ]; then
      echo "INSTALLED_LIBHEIF_VER: $INSTALLED_LIBHEIF_VER"
    fi
  else
    if [ -n "$VERBOSE" ]; then
      echo "INSTALLED_LIBHEIF_VER: Unknown"
    fi
  fi

  LATEST_LIBHEIF_VER=$(
    wget "$GITHUB_AUTH" -qO- "https://api.github.com/repos/strukturag/libheif/releases/latest" |
      jq -r '.tag_name' |
      cut -c2-
  )

  # Fallback
  if [ -z "$LATEST_LIBHEIF_VER" ]; then
    LATEST_LIBHEIF_VER=$(
      wget -qO- "https://1-2.dev/imei?versions" |
        jq -r '.libheif'
    )
  fi

  if [ -n "$VERBOSE" ]; then
    if [ -z "$LATEST_LIBHEIF_VER" ]; then
      echo "LATEST_LIBHEIF_VER: Unknown"
    else
      echo "LATEST_LIBHEIF_VER: $LATEST_LIBHEIF_VER"
    fi
    echo ""
  fi
else
  echo "ImageMagick is not installed"
  exit 1
fi

###########################
# Version checks & update #
###########################

UPDATE=false

if [ "$(version "$(echo "$INSTALLED_IMAGEMAGICK_VER" | sed 's/-//g')")" -lt "$(version "$(echo "$LATEST_IMAGEMAGICK_VER" | sed 's/-//g')")" ]; then
  UPDATE=true
fi

if [ -z "$INSTALLED_AOM_VER" ] || [ "$(version "$INSTALLED_AOM_VER")" -lt "$(version "$LATEST_AOM_VER")" ]; then
  UPDATE=true
fi

if [ -z "$INSTALLED_LIBHEIF_VER" ] || [ "$(version "$LATEST_LIBHEIF_VER")" -lt "$(version "$LATEST_LIBHEIF_VER")" ]; then
  UPDATE=true
fi

if [ "$UPDATE" = true ]; then
  TMP_FILE=$(mktemp)

  wget -O "$TMP_FILE" "https://1-2.dev/imei" >/dev/null 2>&1
  chmod +x "$TMP_FILE"

  exec "$TMP_FILE" --imagemagick-version "$LATEST_IMAGEMAGICK_VER" --aom-version "$LATEST_AOM_VER" --libheif-version "$LATEST_LIBHEIF_VER"
else
  echo "Everything is up to date."
  echo ""
fi

exit 0
